#!/usr/bin/env ruby
require 'rubygems' # wayne seguine told me this is ok in application code
require 'pathname'
require 'shellwords'

module Hipe; end

# allow this to be subsumed into a multiplexing app without reliance on rubygems to load tinyscript
here = File.dirname(__FILE__)
require here + '/hipe-tinyscript/core' unless Hipe.const_defined? :Tinyscript
require here + '/hipe-tinyscript/support' unless Hipe::Tinyscript.const_defined? :Support
require here + '/support'

# require 'ruby-debug'; puts Hipe::Tinyscript::Colorize.colorize("foo", :blink, :bright, :red);

module Hipe::FileMetrics

  VERSION = '0.3.0'

  SoftError = Hipe::SoftError # include just this thing

  class MyCommand < Hipe::Tinyscript::Command

    # these are parameters shared by all of the beautiful children

    parameter '-D', '--exclude-dir DIR', :many=>true, :default=>['.*'], :desc=><<-desc
      folders whose basename match this pattern will not be
      descended into.  It can be specified multiple times
      with multiple patterns to narrow the search.
      If not provided, the default is to skip folders whose
      name starts with a '.' (period).  To include such
      dirs, specify "--exclude-dirs=[]" the first time you
      use this option in the command.  (it has the effect
      of clearing the "blacklist" of directories to skip)

    desc

    parameter '-n', '--name NAME', :many=>true, :desc=> <<-desc
      e.g. --name='*.rb'.  When present, this limits the
      files analyzed to the ones whose basename matches
      this pattern. It can be specified multiple times to
      add multiple filename patterns, which will broaden
      the search.  You should use single quotes to avoid
      shell expansion.

      When PATH is a file, this option is ignored.

    desc

    parameter '-g', '--command', 'show the generated find command we would have used.'

    parameter '-l', '--list', 'list the resulting files that match the query.'

    parameter '-R', '--no-report', "don't actually run the whole report."

    include PathTools
    def execute
      begin
        execute_no_catch
      rescue SoftError => e
        err e.ui_message
        :errors
      end
    end
    alias_method :orig_on_success, :on_success
    def on_success; end
    def files_find_command paths = nil
      paths ||= param(:paths)
      paths = [paths] unless paths.kind_of?(Array)
      cmd = FindCommand.new do |find|
        find.paths paths
        find.skip_dirs @param[:exclude_dir]
        find.names  @param[:name]
        find.extra = ' -not -type d'
      end
      cmd.render
    end
    def linecount_data_node label, files
      root = Hipe::DataNode::Branch.new do |n|
        n.name = label
        n[:num_lines_total] = nil
      end
      return root if files.size == 0
      read_ok = []
      problems = []
      files.each do |f|
        if File.exist?(f)
          if File.readable?(f)
            read_ok.push(f)
          else
            problems.push [:not_readable, f]
          end
        else
          problems.push [:bad_link, f]
        end
      end
      if problems.any?
        err problems.map{ |reason, file| colorize("#{reason}? ", :red) << file }
      end
      if ! @param[:no_blank] && ! @param[:no_comment]
        straight_linecount root, read_ok
      else
        filtered_linecount root, read_ok
      end
      root.extend Hipe::Stats::Calculator # do this after children have been added
      root.num_lines_total or root.num_lines_total = root.stats.count
      root
    end
    def filtered_linecount node, paths
      (chain = [
        @param[:no_blank]   ? %s(grep -v '^[ \t]*$') : nil,
        @param[:no_comment] ? %s(grep -v '^[\t ]*#') : nil,
        'wc -l'
      ].compact).size > 1 or fail("nevar") # careful. we want at least one grep above
      node.children ||= []
      paths.each do |path|
        cmd = ["cat #{escape_path(path)}", *chain].join(' | ')
        lines = baktix(cmd){ |b| b.announce = @param[:command] }
        case lines.size
        when 0 ; err(colorize('err: ', :red) << "no lines returned from " << colorize(cmd, :green))
        when 1 ;
          line = lines.first
          if /\A[[:space:]]*(\d+)[[:space:]]*\z/ =~ line
            node.children.push Hipe::DataNode::Leaf.new{ |n|
              n.name = path
              n.count = $1.to_i
            }
          else
            err(colorize('err: ', :red) << "failed to match digit from " << colorize(line, :green))
          end
        else err(colorize('err: ', :red) << "too many lines returned from " << colorize(cmd, :green))
        end
      end
      nil
    end
    def straight_linecount node, paths
      # if sort is not available on the system, consider doing it w/ ruby
      paths_escaped = paths.map{ |p| escape_path(p) }
      lines = baktix("wc -l #{paths_escaped * ' '} | sort -g")
      case lines.size
      when 0; raise SoftError.new("not expecting zero lines from wc")
      when 1;
        md = /^ *(\d+) (.+)$/.match(lines.last) or
          raise SoftError.new("regex fail against wc results: #{lines.last.inspect}"){ |e| e.show_origin! }
        wc_total = md[1]
      else
        md = /^ *(\d+) total$/.match(x=lines.pop) or
          raise SoftError.new(%|regex fail against wc results: "#{x}"|){ |e| e.show_origin! }
        wc_total = md[1].to_i
      end
      node.num_lines_total = wc_total
      node.children = lines.map do |wc_line|
        md = wc_line.match(/\A *(\d+) *(.+)\z/) or
          raise SoftError("Failed to match against #{wc_line.inspect}"){ |e| e.show_origin! }
        Hipe::DataNode::Leaf.new do |me|
          me.name = md[2]
          me.count = md[1].to_i
        end
      end
      node
    end
  end

  PathOpts = { :positional => true, :required => false, :syntaxy_name => 'path',
               :default => ['.'], :desc => "Search for files in these folders.",
               :glob => true }

  class App < Hipe::Tinyscript::App
    description <<-desc
      filemetrics - view statistics about distribution of lines of code
      as they are distributed accross a tree of files

      desc
    commands MyCommand
  end

  class Lc < MyCommand
    parameter :paths, PathOpts.merge(:desc => 'path(s) to search for files in')

    description <<-desc
      shows the linecount of each file, longest first. Show
      percentages of max for each file.   will go recursively
      into directories.
      desc

    parameter :no_comment, '-C', "don't count lines with ruby-style comments."
    parameter :no_blank,   '-B', "don't count blank lines."

    def execute_no_catch
      @param[:name] ||= []
      @param[:exclude_dir].first == '[]' and @param[:exclude_dir].shift
      @param[:command] && out(files_find_command)
      @param[:list] && baktix(files_find_command){ |bt| bt.announce; bt.out{ |line| out line } }
      @param[:no_report] || render_report(baktix(files_find_command){|b| b.announce = false })
      nil
    end

    def render_report filepaths
      node = linecount_data_node('files', filepaths)
      node.sort_by!{ |n| n.stats.ratio_of_max }
      matrix = node.children.map do |n|
        [ '%d' % n.stats.count,
          '%5.01f%' % n.stats.percent_of_max,
          n.name
        ]
      end
      tableize(matrix) do |t|
        out "summary of linecounts for #{node.name}"
        fmt = "%#{t.width(0)}s %#{t.width(1)}s %-#{t.width(2)}s"
        t.rows{ |*row| out fmt % row  }
      end
      out "total: #{node.num_lines_total || 0}"
    end
  end

  class Dirs < MyCommand
    description <<-desc
      experimental report.  all folders one level under <path>,
      for each of them report number of files and total sloc,
      and show them in order of total sloc and percent of max
    desc

    parameter :path, :default => '.', :desc => 'search in this folder', :positional => true

    def execute_no_catch
      @param[:name] ||= []
      @param[:exclude_dir].first == '[]' and @param[:exclude_dir].shift
      @param[:command] && out(dirs_find_command)
      @param[:list] && out(baktix(dirs_find_command))
      @param[:no_report] || render_report(param(:path), baktix(dirs_find_command))
      nil
    end
    def on_success; end # no 'done.' evar
  private
    def dirs_find_command
      cmd = FindCommand.new do |find|
        find.paths [param(:path)] # always sic
        find.skip_dirs @param[:exclude_dir]
        find.extra = ' -a -maxdepth 1 -type d'
      end
      cmd.render
    end
    def render_report path, folders
      root_list = folders.map do |folder|
        list = baktix(files_find_command(folder))
        linecount_data_node(File.basename(folder), list)
      end
      root = Hipe::DataNode::Branch.new do |me|
        me.name = "folders summary"
        me.children = root_list
        me.extend Hipe::Stats::Calculator
      end
      root.sort_by!{ |child| child.stats.count }
      fieldset = Hipe::Tinyscript::Support::Fieldset.new do |fs|
        fs.field(:folder_name)     { |x| x.name }
        fs.field(:total_lines)     { |x| x.stats.count }
        fs.field(:percent_of_max)  { |x| '%5.01f' % x.stats.percent_of_max }
        fs.field(:number_of_files) { |x| x.children.length }
        fs.field(:longest_file)    { |x| x.stats.max }
      end
      matrix = root.children.map{ |node| fieldset.map{ |f| f.render(node) } }
      tableize(matrix) do |t|
        out "summary of folders in #{path}"
        matrix.unshift fieldset.map(&:titleize)
        fmt = fieldset.map{ |f| f.printf_format(t.width(f.index)) }.join(' | ')
        t.rows{ |*row| out(fmt % row) }
      end
    end
  end

  class Ext < MyCommand
    description "just report on the number of files with different extensions,
      ordered by frequency of extension"
    parameter '--[no-]git', 'be aware of git commit objects,',
                      'glob them in to one category', :default => true
    # parameter '-e', '--each', 'for files with out extensions, show each name'
    parameter '--[no-]singles', 'by default, extensions that occur only once',
                      'are globbed together. Use this flag ',
                      'to include them in the main table.', :default => false

    parameter :paths, PathOpts

    def execute_no_catch
      @param[:exclude_dir].shift if @param[:exclude_dir].first == '[]'
      @pats = []
      @pats.push [/^[0-9a-f]{38,40}$/, 'git object'] if @param[:git]
      counts = Hash.new do |h, k|
        h[k] = Hipe::Tinyscript::Support::EpeenStruct[{ :count => 0, :extension => k, :name => k }]
      end
      cmd = FindCommand.new do |find|
        find.paths param(:paths)
        find.skip_dirs @param[:exclude_dir]
        find.names @param[:name]
        find.extra = ' -not -type d'
      end
      cmd_str = cmd.render
      baktix(cmd.render) do |bt|
        bt.out do |line|
          pn = Pathname.new(line.chomp!)
          ext = pn.extname.to_s
          ext.empty? && (ext = ((pat = @pats.detect{ |p| p[0] =~ pn.basename }) ? pat[1] : pn.basename.to_s))
          counts[ext].count += 1
        end
      end
      root = Hipe::DataNode::Branch.new do |me|
        me.name = "extensions summary"
        me.children = counts.values
        me.extend Hipe::Stats::Calculator
      end
      rows = root.sort_by!{ |node| node.count }
      if ! @param[:one]
        singles = []; multis = []
        rows.each{ |x| (x.count == 1 ? singles : multis).push x }
        singles.sort!{ |x, y| x.extension <=> y.extension }
        rows = multis
      end
      fields = Hipe::Tinyscript::Support::Fieldset.new do |fs|
        fs.field(:extension){ |x| x.extension=='' ? '[none]' : x.extension }
        fs.field(:num_files){ |x| x.count }
        fs.field(:percent_of_max){ |x| '%5.01f' % x.stats.percent_of_max }
      end
      matrix = rows.map{ |r| fields.map{ |f| f.render(r) } }
      tableize(matrix) do |t|
        out "occurences of extensions in #{@param[:paths].map(&:inspect).join(', ')}:"
        t.rows.unshift fields.map(&:titleize)
        fmt = fields.map{ |f| f.printf_format(t.width(f.index)) }.join(' | ')
        t.rows{ |*row| out fmt % row }
      end
      if singles && singles.any?
        out "occured only once: (#{singles.map(&:extension) * ', '})"
      end
    end
  end
end

Hipe::FileMetrics::App.new.run(ARGV) if File.basename($PROGRAM_NAME) == File.basename(__FILE__)
